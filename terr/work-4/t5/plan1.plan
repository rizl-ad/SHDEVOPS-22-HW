Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # module.db_cluster.yandex_mdb_mysql_cluster.mysql_db_cluster will be created
  + resource "yandex_mdb_mysql_cluster" "mysql_db_cluster" {
      + allow_regeneration_host   = false
      + backup_retain_period_days = (known after apply)
      + created_at                = (known after apply)
      + deletion_protection       = true
      + disk_encryption_key_id    = (known after apply)
      + environment               = "PRODUCTION"
      + folder_id                 = (known after apply)
      + health                    = (known after apply)
      + host_group_ids            = (known after apply)
      + id                        = (known after apply)
      + mysql_config              = (known after apply)
      + name                      = "mysql-db-cluster"
      + network_id                = (known after apply)
      + status                    = (known after apply)
      + version                   = "8.0"

      + access (known after apply)

      + backup_window_start (known after apply)

      + disk_size_autoscaling (known after apply)

      + host {
          + assign_public_ip   = true
          + fqdn               = (known after apply)
          + replication_source = (known after apply)
          + subnet_id          = (known after apply)
          + zone               = "ru-central1-a"
        }

      + maintenance_window (known after apply)

      + performance_diagnostics (known after apply)

      + resources {
          + disk_size          = 10
          + disk_type_id       = "network-hdd"
          + resource_preset_id = "b2.medium"
        }
    }

  # module.db_cluster_pers.random_password.db_user_pass will be created
  + resource "random_password" "db_user_pass" {
      + bcrypt_hash = (sensitive value)
      + id          = (known after apply)
      + length      = 16
      + lower       = true
      + min_lower   = 0
      + min_numeric = 0
      + min_special = 0
      + min_upper   = 0
      + number      = true
      + numeric     = true
      + result      = (sensitive value)
      + special     = true
      + upper       = true
    }

  # module.db_cluster_pers.yandex_mdb_mysql_database.db_w4_t5 will be created
  + resource "yandex_mdb_mysql_database" "db_w4_t5" {
      + cluster_id = (known after apply)
      + id         = (known after apply)
      + name       = "db_w4_t5"
    }

  # module.db_cluster_pers.yandex_mdb_mysql_user.user_db_w4_t5 will be created
  + resource "yandex_mdb_mysql_user" "user_db_w4_t5" {
      + authentication_plugin = (known after apply)
      + cluster_id            = (known after apply)
      + connection_manager    = (known after apply)
      + generate_password     = false
      + global_permissions    = (known after apply)
      + id                    = (known after apply)
      + name                  = "app"
      + password              = (sensitive value)

      + connection_limits (known after apply)

      + permission {
          + database_name = "db_w4_t5"
          + roles         = [
              + "ALL",
            ]
        }
    }

  # module.vpc.yandex_vpc_network.network_terr_w4_t2 will be created
  + resource "yandex_vpc_network" "network_terr_w4_t2" {
      + created_at                = (known after apply)
      + default_security_group_id = (known after apply)
      + folder_id                 = (known after apply)
      + id                        = (known after apply)
      + labels                    = (known after apply)
      + name                      = "network-terr-w4-t2"
      + subnet_ids                = (known after apply)
    }

  # module.vpc.yandex_vpc_subnet.subnet_terr_w4_t2[0] will be created
  + resource "yandex_vpc_subnet" "subnet_terr_w4_t2" {
      + created_at     = (known after apply)
      + folder_id      = (known after apply)
      + id             = (known after apply)
      + labels         = (known after apply)
      + name           = "subnet-terr-w4-t2-0"
      + network_id     = (known after apply)
      + v4_cidr_blocks = [
          + "10.0.10.0/24",
          + "10.0.11.0/24",
          + "10.0.12.0/24",
        ]
      + v6_cidr_blocks = (known after apply)
      + zone           = "ru-central1-a"
    }

  # module.vpc.yandex_vpc_subnet.subnet_terr_w4_t2[1] will be created
  + resource "yandex_vpc_subnet" "subnet_terr_w4_t2" {
      + created_at     = (known after apply)
      + folder_id      = (known after apply)
      + id             = (known after apply)
      + labels         = (known after apply)
      + name           = "subnet-terr-w4-t2-1"
      + network_id     = (known after apply)
      + v4_cidr_blocks = [
          + "10.0.20.0/24",
          + "10.0.21.0/24",
        ]
      + v6_cidr_blocks = (known after apply)
      + zone           = "ru-central1-b"
    }

  # module.vpc.yandex_vpc_subnet.subnet_terr_w4_t2[2] will be created
  + resource "yandex_vpc_subnet" "subnet_terr_w4_t2" {
      + created_at     = (known after apply)
      + folder_id      = (known after apply)
      + id             = (known after apply)
      + labels         = (known after apply)
      + name           = "subnet-terr-w4-t2-2"
      + network_id     = (known after apply)
      + v4_cidr_blocks = [
          + "10.0.30.0/24",
          + "10.0.31.0/24",
        ]
      + v6_cidr_blocks = (known after apply)
      + zone           = "ru-central1-d"
    }

Plan: 8 to add, 0 to change, 0 to destroy.
